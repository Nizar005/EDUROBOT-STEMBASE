#include <Wire.h>
#include <Adafruit_TCS34725.h>

#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define OLED_RESET -1
//OLED init
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1, OLED_RESET);

//TCS init
Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_4X);

int ins[20]; // instruction model
int insstep = 0;  //instructions step
float red, green, blue; //sensor value

const unsigned char logstemba [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x27, 0x1d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x86, 0x67, 0x1d, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0f, 0x77, 0x1f, 0x90, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x2b, 0xfd, 0x1f, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xff, 0x80, 0x03, 0xfa, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xff, 0x00, 0x00, 0x7f, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x78, 0x07, 0xf0, 0x1f, 0xc1, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x60, 0x3f, 0xfe, 0x03, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x06, 0x0f, 0x80, 0xfc, 0x1f, 0x81, 0xe8, 0x60, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x3f, 0x83, 0xe3, 0xc3, 0xe0, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x1e, 0x0f, 0x8f, 0xf8, 0xf8, 0x76, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x20, 0x48, 0x1f, 0x3f, 0xfe, 0x7c, 0x1e, 0x04, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x40, 0xf8, 0x7d, 0xff, 0xff, 0xdf, 0x0e, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0xf3, 0xff, 0xdf, 0xe7, 0x8f, 0x81, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x81, 0xf1, 0xef, 0xff, 0xff, 0xfb, 0xc7, 0x00, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0x00, 0xe3, 0xdf, 0xff, 0xff, 0xfd, 0xe3, 0xc0, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x02, 0x03, 0xc7, 0xbf, 0xff, 0xff, 0xfe, 0xf3, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x02, 0x03, 0xcf, 0x7f, 0xff, 0xff, 0xff, 0x70, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x02, 0x00, 0xce, 0xff, 0xff, 0xff, 0xff, 0xb8, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x02, 0x00, 0x0c, 0xff, 0xff, 0xff, 0xff, 0xa8, 0x70, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x02, 0x00, 0x0d, 0xfe, 0x7f, 0xff, 0x3f, 0x98, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x02, 0x0e, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x60, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x02, 0x03, 0x1d, 0xe1, 0xff, 0xff, 0xc3, 0xdc, 0xf0, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x02, 0x0e, 0x1d, 0xf3, 0xff, 0xff, 0xe7, 0xdc, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0x07, 0x1d, 0xf2, 0x7f, 0xff, 0x07, 0xdc, 0xf8, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x07, 0x1d, 0xf3, 0x00, 0x01, 0x67, 0xdc, 0xa0, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x0f, 0x1d, 0xf3, 0x4f, 0xfb, 0x67, 0xdc, 0x30, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x07, 0x1d, 0xf3, 0x4f, 0xfb, 0x67, 0xdc, 0x58, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x81, 0x1d, 0xf3, 0x40, 0x01, 0x67, 0xdc, 0xe8, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x81, 0x1d, 0xf2, 0x1f, 0xfc, 0x27, 0xdc, 0x78, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x8f, 0x1d, 0xf3, 0xff, 0xff, 0xc7, 0xdc, 0x61, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x87, 0x0d, 0xf3, 0xff, 0xff, 0xe7, 0xdc, 0xf1, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xc7, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf9, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xcc, 0x8c, 0xff, 0xff, 0xff, 0xff, 0xa8, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x45, 0x8c, 0xff, 0xff, 0xff, 0xff, 0xa9, 0xe2, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x47, 0x8e, 0xff, 0xff, 0xff, 0xff, 0xb9, 0xf2, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x63, 0xce, 0x7f, 0xff, 0xff, 0xff, 0x71, 0xe6, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x23, 0xc7, 0xbf, 0xff, 0xff, 0xfe, 0xf1, 0xc4, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x23, 0xa3, 0xdf, 0xff, 0xff, 0xfd, 0xe0, 0x44, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x30, 0xf1, 0xef, 0xff, 0xff, 0xf3, 0xc0, 0x0c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0xe0, 0xf3, 0xff, 0xff, 0xe7, 0x80, 0x0c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0xf8, 0x78, 0x7f, 0xff, 0x9f, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x08, 0x78, 0x1f, 0x3f, 0xfe, 0x7c, 0x07, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x70, 0x0f, 0xcf, 0xf9, 0xf8, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x03, 0xf8, 0x8f, 0xe0, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x77, 0x7f, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x3f, 0x00, 0x00, 0x7e, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x3e, 0xd0, 0x03, 0x7e, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0xfe, 0xef, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0c, 0xf6, 0xaf, 0xe8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xff, 0xff, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x1b, 0xb8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char logmeka [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x02, 0x80, 0x68, 0x82, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x80, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x92, 0x10, 0x05, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x08, 0x00, 0x10, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0xfd, 0xee, 0xfe, 0xff, 0xfd, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xdf, 0xff, 0xff, 0xf9, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x8f, 0xff, 0xff, 0xf1, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc7, 0xf3, 0xfc, 0xe3, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc7, 0xc0, 0xf8, 0xe1, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x07, 0x8c, 0x23, 0xf0, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x0f, 0x3f, 0x0f, 0xf0, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xfd, 0x9f, 0xff, 0xff, 0xf9, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x3f, 0xe1, 0xfc, 0xfe, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x3f, 0x80, 0x71, 0xfc, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x3f, 0x1e, 0x03, 0xfc, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x3f, 0x3f, 0x8f, 0xfc, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0x78, 0x3f, 0xf3, 0xfc, 0xfe, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7e, 0x4c, 0x3f, 0xc0, 0xf1, 0xfe, 0x3c, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3e, 0x0c, 0x3f, 0x1c, 0x03, 0xfe, 0x3a, 0x9e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3e, 0x0c, 0x3f, 0x3f, 0x0f, 0xfe, 0x39, 0x9e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0xcc, 0x3f, 0xff, 0xff, 0xfe, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3d, 0x18, 0x3f, 0xff, 0xff, 0xfe, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x3f, 0xff, 0xff, 0xfc, 0x1d, 0x1c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1e, 0x78, 0x3f, 0xff, 0xff, 0xfc, 0x1f, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1c, 0x18, 0x3f, 0xff, 0xff, 0xfc, 0x1e, 0x48, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x1f, 0x00, 0x00, 0xf8, 0x1e, 0x48, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x1f, 0x0f, 0x00, 0x00, 0xf8, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0x0f, 0xff, 0xff, 0xf0, 0xfc, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x4f, 0x87, 0xff, 0xff, 0xf1, 0xfc, 0x30, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0e, 0x6f, 0xc3, 0xff, 0xff, 0xc1, 0xff, 0x70, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0e, 0xff, 0x81, 0xff, 0xff, 0x81, 0xfb, 0xb0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xf7, 0x80, 0x7f, 0xff, 0x01, 0xf1, 0xb0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xe7, 0xc0, 0x1f, 0xfc, 0x03, 0xf0, 0x30, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0x85, 0xe4, 0x03, 0xc0, 0x27, 0xf9, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xa0, 0xff, 0x00, 0x00, 0x7f, 0xdc, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x7f, 0x80, 0x01, 0xff, 0xc2, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xed, 0x3f, 0x80, 0x00, 0xff, 0x41, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xf2, 0x4f, 0xe3, 0xc3, 0xfe, 0x2f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xfa, 0x27, 0xff, 0xff, 0xf3, 0x27, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x30, 0xff, 0xff, 0x81, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x61, 0x0f, 0xfc, 0x18, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xa8, 0xa1, 0x89, 0x05, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xd2, 0x81, 0xec, 0x58, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x09, 0xde, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x09, 0xdc, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe1, 0xdf, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup() {
  Serial.begin(115200);
  //pb
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
  pinMode(15, INPUT_PULLUP);
  //motor
  pinMode(16, OUTPUT); //motor in1-motor1
  pinMode(17, OUTPUT); //motor in2-motor1
  pinMode(18, OUTPUT); //motor in3-motor2
  pinMode(19, OUTPUT); //motor in4-motor2

  //start tcs sensor and confirm
  if (tcs.begin()) {
    Serial.println("Found sensor");
  } 
  // if tcs failed, stop
  else {
    Serial.println("No TCS34725 found ... check your connections");
    //while (1); 
  }
  
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("SSD1306 allocation failed"));
    //for(;;); // Don't proceed, loop forever
  }
  else{
    
  }


  display.clearDisplay();

  display.drawBitmap(0, 0, logstemba, 128, 64, WHITE);
  display.display();
  delay(3000);
  display.clearDisplay();
  display.display();

  display.drawBitmap(0, 0, logmeka, 128, 64, WHITE);
  display.display();
  delay(3000);
  display.clearDisplay();
  display.display();

  display.setTextSize(1); // Draw 2X-scale text
  display.setTextColor(WHITE);
  display.setCursor(10, 0);

  for(int i = 0; i<5; i++){
  display.print("loading.");
  display.display();
  delay(500);
  display.clearDisplay();
  display.setCursor(10, 0);

  display.print("loading..");
  display.display();
  delay(500);
  display.clearDisplay();
  display.setCursor(10, 0);

  display.print("loading...");
  display.display();
  delay(500);
  display.clearDisplay();
  display.setCursor(10, 0);
  }
}


void loop() {
  if(digitalRead(13) == 0){
    scan();
  }
  else if(digitalRead(14) == 0){
    for(int i = 0; i < 20; i++){
      int x = ins[i];
      if(x == 1){
        analogWrite(16, 100);
        analogWrite(17, 0);
        analogWrite(18, 100);
        analogWrite(19, 0);
        delay(2000);
      }
      else if(x == 2){
        analogWrite(16, 100);
        analogWrite(17, 0);
        analogWrite(18, 0);
        analogWrite(19, 0);
        delay(1000);
      }
      else if(x == 3){
        analogWrite(16, 0);
        analogWrite(17, 0);
        analogWrite(18, 100);
        analogWrite(19, 0);
        delay(1000);
      }
      else if(x == 0){
       analogWrite(16, 0);
       analogWrite(17, 0);
       analogWrite(18, 0);
       analogWrite(19, 0);
       break;
      }
    }
  }
}


void scan(){
  getsensor();
  delay(100);
  intoarray(compare());
  //Serial.println(red);
  //Serial.println(green);
  //Serial.println(blue);
  //Serial.println("");
  //Serial.println(compare());
  //Serial.println("");
  for (int i = 0; i < 20; i++) {
    Serial.print(ins[i]);
    Serial.print("");
  }
  Serial.println("");
  delay(500);
}

void getsensor(){
  tcs.setInterrupt(false);  // turn on LED
  delay(60);  // takes 50ms to read
  tcs.getRGB(&red, &green, &blue);
  tcs.setInterrupt(true);  // turn off LED
}

int compare(){
  if(ranging(red, 89, 119) && ranging(green, 72, 102) && ranging(blue, 58, 88)){ //blue
    return (1);
  }
  else if(ranging(red, 136, 166) && ranging(green, 47, 77) && ranging(blue, 39, 79)){ //red
    return (2);
  }
  else if(ranging(red, 124, 154) && ranging(green, 63, 93) && ranging(blue, 31, 61)){ // yellow
    return (3);
  }
  else{
    return (0);
  }
}

void intoarray(int data){
  if (insstep < 20) {
    ins[insstep] = data;
    insstep++;
  }
}

bool ranging(float in, float min, float max){
  return (in >= min && in <= max);
}
